%c 打印字符类型数据
%d 打印整型类型数据
%f 打印浮点型数据 fmt.printf("%f")  默认保留六位小数%.2f 保留两位小数 对第三位四舍五入
%s 打印字符串类型
%p 打印变量地址（指针类型）
%t 打印布尔类型数据
%T 打印数据类型  a:=3.14 float64 a:=10 int a:='a'int32

%o 打印八进制整型数据
%x %X 打印十六进制整型数据  a-f A-F
%%  打印一个%

转义字符 
'\n' 表示换行
'\\' 表示\ 
'\0' 表示字符串结束标志 ASCII值为0

常量 
格式 const 常量名 数据类型=值  一般常量大写字母
常量的值在程序运行过程中其值不能发生改变
常在在内存中的数据区进行存储   变量是在内存中的栈区存储 
系统为每一个应用程序分配了1M的内存空间存储变量和函数的信息

iota 枚举
枚举一般用作于程序的流程控制
const(
  a=iota //0
  b,c=iota,iota//1
  d=20//2
)

运算符：
1、算数运算符
加【+】 减【-】乘【*】 除【/】  两个相同类型的数据相除是得到的结果类型也相同 除数不能为0
取余【%】  取余只能对整型操作   除数不能为0
自增【++】自减【--】 go语言中只有后自增后自减  不能参与表达式计算（二义性？？）

类型转换  
不同类型转换  如果讲浮点型转成整型 会丢失精度 只会保留整数部分  不会四舍五入
同一类型转换  建议将低类型转成高类型 防止数据丢失  【高位溢出】
格式： 数据类型(变量) 数据类型(表达式)


赋值运算符：
加等于【+=】 减等于【-=】乘等于【*=】除等于【/=】取余等于【%=】

比较运算符：
【>】【<】【>=】【<=】【==】【!=】
比较运算符返回值为bool类型 true false

逻辑运算符：
非【!】非真为假 非假为真
或【||】同假为假 其余为真
与【&&】同真为真 其余为假

其他运算符：
取地址【&】  对变量去地址是指针类型
取值运【*】  对指针变量取值

运算符优先级：
//括号 （） 结构体成员.  数组下标[]

//单目运算符
//逻辑非! 取地址& 取值* 自增++ 自减--

//双目运算符
//乘除 * / %
//加减 + -
//关系 == != > >= < <=
//逻辑 || &&  注意 逻辑与高于逻辑或
//赋值 = += -= *= /= %=

